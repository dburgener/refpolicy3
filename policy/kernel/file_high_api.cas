// SPDX-License-Identifier: GPL-2.0

//
// Higher-level file APIs
//

//
// Common file API
//
@derive(strategy=file_api)
trait resource common_file_api inherits dir_api, file_api, symlink_api {
    /// API for common regular files (file object class).
    /// This provides common access patterns for accessing files, including directory and symlink access.

    @alias(stat)
    fn getattr(domain source) {
        /// Get the attributes of this file.
        this<file_api>.getattr(source);
        this<dir_api>.list(source);
        this<symlink_api>.read(source);
    }

    @alias(dontaudit_stat)
    fn dontaudit_getattr(domain source) {
        /// Do not audit denials for getting the attributes of this file.
        this<file_api>.dontaudit_getattr(source);
        this<dir_api>.dontaudit_list(source);
        this<symlink_api>.dontaudit_read(source);
    }

    @alias(chown, chmod)
    fn setattr(domain source) {
        /// Set the attributes of this file.
        this<file_api>.dontaudit_setattr(source);
        this<dir_api>.dontaudit_list(source);
        this<symlink_api>.dontaudit_read(source);
    }

    @alias(dontaudit_chown, dontaudit_chmod)
    fn dontaudit_setattr(domain source) {
        /// Do not audit denials for setting the attributes of this file.
        this<file_api>.dontaudit_setattr(source);
        this<dir_api>.dontaudit_list(source);
        this<symlink_api>.dontaudit_read(source);
    }

    fn list(domain source) {
        /// List (read) the contents of this directory.
        this<dir_api>.list(source);
        this<symlink_api>.read(source);
    }

    fn dontaudit_list(domain source) {
        /// Do not audit denials for listing (reading) the contents of this directory.
        this<dir_api>.dontaudit_read(source);
        this<symlink_api>.dontaudit_read(source);
    }

    fn read(domain source) {
        /// Read this file.
        /// This function is sensitive to the files_loose_mmap and the files_loose_watch tunables.
        this<file_api>.read(source);
        this<dir_api>.list(source);
        this<symlink_api>.read(source);
    }

    fn dontaudit_read(domain source) {
        /// Do not audit denials for reading this file.
        /// This function is sensitive to the files_loose_mmap and the files_loose_watch tunables.
        this<file_api>.dontaudit_read(source);
        this<dir_api>.dontaudit_list(source);
        this<symlink_api>.dontaudit_read(source);
    }

    fn mmap_read(domain source) {
        /// mmap() this file as read-only.
        /// This function is sensitive to the files_loose_watch tunable.
        this<file_api>.mmap_read(source);
        this<dir_api>.list(source);
        this<symlink_api>.read(source);
    }

    fn dontaudit_mmap_read(domain source) {
        /// Do not audit denials for mmap() read-only.
        /// This function is sensitive to the files_loose_watch tunable.
        this<file_api>.dontaudit_mmap_read(source);
        this<dir_api>.dontaudit_list(source);
        this<symlink_api>.dontaudit_read(source);
    }

    fn mmap_exec(domain source) {
        /// mmmap() this file as read-only and executable.
        /// This function is sensitive to files_loose_execmod and files_loose_watch tunables.
        this<file_api>.mmap_exec(source);
        this<dir_api>.list(source);
        this<symlink_api>.read(source);
    }

    fn dontaudit_mmap_exec(domain source) {
        /// Do not audit denials for mmmap() this file as read-only and executable.
        /// This function is sensitive to files_loose_execmod and files_loose_watch tunables.
        this<file_api>.dontaudit_mmap_exec(source);
        this<dir_api>.dontaudit_list(source);
        this<symlink_api>.dontaudit_read(source);
    }

    fn textrel_mmap_exec(domain source) {
        /// mmmap() this file as read-only and executable with text relocation.
        /// This is for shared libraries (.so files) with text relocations.  It is better to fix
        /// the library to remove text relocations. Alternatively, textrel_shlib_t is the standard
        /// type for system libraries with text relocations.
        /// This function is sensitive to the files_loose_watch tunable.
        this<file_api>.textrel_mmap_exec(source);
        this<dir_api>.list(source);
        this<symlink_api>.read(source);
    }

    fn dontaudit_textrel_mmap_exec(domain source) {
        /// Do not audit denials for mmmap() this file as read-only and executable with text relocation only if it is inherited.
        /// This function is sensitive to the files_loose_watch tunable.
        this<file_api>.dontaudit_textrel_mmap_exec(source);
        this<dir_api>.dontaudit_list(source);
        this<symlink_api>.dontaudit_read(source);
    }

    fn exec(domain source) {
        /// Execute this file.
        /// This function is sensitive to the files_loose_watch tunable.
        this<file_api>.exec(source);
        this<dir_api>.list(source);
        this<symlink_api>.read(source);
    }

    fn dontaudit_exec(domain source) {
        /// Do not audit denials for executing this file.
        /// This function is sensitive to the files_loose_watch tunable.
        this<file_api>.dontaudit_exec(source);
        this<dir_api>.dontaudit_list(source);
        this<symlink_api>.dontaudit_read(source);
    }

    fn append(domain source) {
        /// Append this file.
        /// This function is sensitive to the files_loose_mmap and the files_loose_watch tunables.
        this<file_api>.append(source);
        this<dir_api>.list(source);
        this<symlink_api>.read(source);
    }

    fn dontaudit_append(domain source) {
        /// Do not audit denials for appending this file.
        /// This function is sensitive to the files_loose_mmap and the files_loose_watch tunables.
        this<file_api>.dontaudit_append(source);
        this<dir_api>.dontaudit_list(source);
        this<symlink_api>.dontaudit_read(source);
    }

    fn write(domain source) {
        /// Write this file.
        /// This function is sensitive to the files_loose_mmap and the files_loose_watch tunables.
        this<file_api>.write(source);
        this<dir_api>.list(source);
        this<symlink_api>.read(source);
    }

    fn dontaudit_write(domain source) {
        /// Do not audit denials for writing this file.
        /// This function is sensitive to the files_loose_mmap and the files_loose_watch tunables.
        this<file_api>.dontaudit_write(source);
        this<dir_api>.dontaudit_list(source);
        this<symlink_api>.dontaudit_read(source);
    }

    fn mmap_write(domain source) {
        /// mmmap() this file as write-only.
        /// This function is sensitive to the files_loose_watch tunable.
        this<file_api>.mmap_write(source);
        this<dir_api>.list(source);
        this<symlink_api>.read(source);
    }

    fn dontaudit_mmap_write(domain source) {
        /// Do not audit denials for mmap() write-only.
        /// This function is sensitive to the files_loose_watch tunable.
        this<file_api>.dontaudit_mmap_write(source);
        this<dir_api>.dontaudit_list(source);
        this<symlink_api>.dontaudit_read(source);
    }

    fn rw(domain source) {
        /// Read and write this file.
        /// This function is sensitive to the files_loose_mmap and the files_loose_watch tunables.
        this<file_api>.rw(source);
        this<dir_api>.list(source);
        this<symlink_api>.read(source);
    }

    fn dontaudit_rw(domain source) {
        /// Do not audit denials for reading and writing this file.
        /// This function is sensitive to the files_loose_mmap and the files_loose_watch tunables.
        this<file_api>.dontaudit_rw(source);
        this<dir_api>.dontaudit_list(source);
        this<symlink_api>.dontaudit_read(source);
    }

    fn mmap_rw(domain source) {
        /// mmmap() as read and write this file.
        /// The file cannot be directly opened.
        /// This function is sensitive to the files_loose_watch tunable.
        this<file_api>.mmap_rw(source);
        this<dir_api>.list(source);
        this<symlink_api>.read(source);
    }

    fn dontaudit_mmap_rw(domain source) {
        /// Do not audit denials for mmap() read and write this file.
        /// Denials for opening the file will still be audited.
        /// This function is sensitive to the files_loose_watch tunable.
        this<file_api>.dontaudit_mmap_rw(source);
        this<dir_api>.dontaudit_list(source);
        this<symlink_api>.dontaudit_read(source);
    }

    fn mmap_rwx(domain source) {
        /// mmap() this file as read, write, and executable.
        /// This is a significant security concern as this makes it easy for comopromised domains
        /// to execute arbitrary code.  Ideally, the code should be reworked to remove this
        /// usage.
        /// This function is sensitive to the files_loose_watch tunable.
        this<file_api>.mmap_rwx(source);
        this<dir_api>.list(source);
        this<symlink_api>.read(source);
    }

    fn dontaudit_mmap_rwx(domain source) {
        /// Do not audit denials for mmap() this file as read, write, and executable.
        /// This function is sensitive to the files_loose_watch tunable.
        this<file_api>.dontaudit_mmap_rwx(source);
        this<dir_api>.dontaudit_list(source);
        this<symlink_api>.dontaudit_read(source);
    }

    fn create(domain source) {
        /// Create this file.
        this<file_api>.create(source);
        this<dir_api>.list(source);
        this<dir_api>.create(source);
        this<dir_api>.add_entry(source);
        this<symlink_api>.read(source);
        this<symlink_api>.create(source);
    }

    fn dontaudit_create(domain source) {
        /// Do not audit denials for creating this file.
        this<file_api>.dontaudit_create(source);
        this<dir_api>.dontaudit_list(source);
        this<dir_api>.dontaudit_create(source);
        this<dir_api>.dontaudit_add_entry(source);
        this<symlink_api>.dontaudit_read(source);
        this<symlink_api>.dontaudit_create(source);
    }

    fn rename(domain source) {
        /// Rename this file.
        this<file_api>.rename(source);
        this<dir_api>.list(source);
        this<dir_api>.rename(source);
        this<symlink_api>.read(source);
        this<symlink_api>.rename(source);
    }

    fn dontaudit_rename(domain source) {
        /// Do not audit denials for renaming this file.
        this<file_api>.dontaudit_rename(source);
        this<dir_api>.dontaudit_list(source);
        this<dir_api>.dontaudit_rename(source);
        this<symlink_api>.dontaudit_read(source);
        this<symlink_api>.dontaudit_rename(source);
    }

    @alias(unlink)
    fn delete(domain source) {
        /// Delete this file.
        this<file_api>.delete(source);
        this<dir_api>.list(source);
        this<dir_api>.delete(source);
        this<dir_api>.delete_entry(source);
        this<symlink_api>.read(source);
        this<symlink_api>.delete(source);
    }

    @alias(dontaudit_unlink)
    fn dontaudit_delete(domain source) {
        /// Do not audit denials for deleting this file.
        this<file_api>.dontaudit_delete(source);
        this<dir_api>.dontaudit_list(source);
        this<dir_api>.dontaudit_delete(source);
        this<dir_api>.dontaudit_delete_entry(source);
        this<symlink_api>.dontaudit_read(source);
        this<symlink_api>.dontaudit_delete(source);
    }

    fn manage(domain source) {
        /// Create, read, write, and delete this file.
        /// This function is sensitive to the files_loose_mmap and the files_loose_watch tunables.
        this<file_api>.manage(source);
        this<dir_api>.manage(source);
        this<symlink_api>.manage(source);
    }

    fn dontaudit_manage(domain source) {
        /// Do not audit denials for creating, reading, writing, and deleting this file.
        /// This function is sensitive to the files_loose_mmap and the files_loose_watch tunables.
        this<file_api>.dontaudit_manage(source);
        this<dir_api>.dontaudit_manage(source);
        this<symlink_api>.dontaudit_manage(source);
    }

    fn mmap_manage(domain source) {
        /// Create, read, write, mmap(), and delete this file.
        /// This function is sensitive to the files_loose_watch tunable.
        this<file_api>.mmap_manage(source);
        this<dir_api>.manage(source);
        this<symlink_api>.manage(source);
    }

    fn dontaudit_mmap_manage(domain source) {
        /// Do not audit denials for creating, reading, writing, mmap(), and deleting this file.
        /// This function is sensitive to the files_loose_mmap and the files_loose_watch tunables.
        this<file_api>.dontaudit_mmap_manage(source);
        this<dir_api>.dontaudit_manage(source);
        this<symlink_api>.dontaudit_manage(source);
    }

    fn relabelfrom(domain source) {
        /// Change file labels from this type.
        this<file_api>.relabelfrom(source);
        this<dir_api>.list(source);
        this<symlink_api>.read(source);
    }

    fn dontaudit_relabelfrom(domain source) {
        /// Do not audit denials for changing file labels from this type.
        this<file_api>.dontaudit_relabelfrom(source);
        this<dir_api>.dontaudit_list(source);
        this<symlink_api>.dontaudit_read(source);
    }

    fn relabelto(domain source) {
        /// Change file labels to this type.
        this<file_api>.relabelto(source);
        this<dir_api>.list(source);
        this<symlink_api>.read(source);
    }

    fn dontaudit_relabelto(domain source) {
        /// Do not audit denials for changing file labels to this type.
        this<file_api>.dontaudit_relabelto(source);
        this<dir_api>.dontaudit_list(source);
        this<symlink_api>.dontaudit_read(source);
    }

    fn relabel(domain source) {
        /// Change file labels to this type and from this type.
        this<file_api>.relabel(source);
        this<dir_api>.list(source);
        this<symlink_api>.read(source);
    }

    fn dontaudit_relabel(domain source) {
        /// Do not audit denials for changing file labels to this type and from this type.
        this<file_api>.dontaudit_relabel(source);
        this<dir_api>.dontaudit_list(source);
        this<symlink_api>.dontaudit_read(source);
    }

    fn add_entry_filetrans(domain source, resource default, [class]obj_classes, string name=None) {
        /// Create a file-like object in this directory with a private type.
        /// This does not allow deletions from the directory.
        this<dir_api>.add_entry_filetrans(source, default, obj_classes, name);
        this<symlink_api>.read(source);
    }

    fn filetrans(domain source, resource default, [class]obj_classes, string name=None) {
        /// Create a file-like object in this directory with a private type.
        this<dir_api>.filetrans(source, default, obj_classes, name);
        this<symlink_api>.read(source);
    }

    fn unconfined(domain source) {
        /// Unconfined access (all permissions) on this file.
        /// This function is sensitive to files_loose_execmod.
        this<file_api>.unconfined(source);
        this<dir_api>.unconfined(source);
        this<symlink_api>.unconfined(source);
    }
}

//
// Common Directory API
//
@derive(strategy=dir_api)
trait resource common_dir_api inherits dir_api, symlink_api {
    /// API for common directories (dir object class).

    @alias(stat)
    fn getattr(domain source) {
        /// Get the attributes of this directory.
        this<dir_api>.getattr(source);
        this<symlink_api>.read(source);
    }

    @alias(dontaudit_stat)
    fn dontaudit_getattr(domain source) {
        /// Do not audit denials for getting the attributes of this directory.
        this<dir_api>.dontaudit_getattr(source);
        this<symlink_api>.dontaudit_read(source);
    }

    @alias(chown, chmod)
    fn setattr(domain source) {
        /// Set the attributes of this directory.
        this<dir_api>.setattr(source);
        this<symlink_api>.read(source);
    }

    @alias(dontaudit_chown, dontaudit_chmod)
    fn setattr(domain source) {
        /// Do not audit denials for setting the attributes of this directory.
        this<dir_api>.dontaudit_setattr(source);
        this<symlink_api>.dontaudit_read(source);
    }

    @alias(read)
    fn list(domain source) {
        /// List (read) the contents of this directory.
        this<dir_api>.list(source);
        this<symlink_api>.read(source);
    }

    @alias(dontaudit_read)
    fn dontaudit_list(domain source) {
        /// Do not audit denials for listing (reading) the contents of this directory.
        this<dir_api>.dontaudit_read(source);
        this<symlink_api>.dontaudit_read(source);
    }

    @alias(append)
    fn add_entry(domain source) {
        /// Add entries to this directory.
        this<dir_api>.add_entry(source);
        this<symlink_api>.read(source);
    }

    @alias(dontaudit_append)
    fn dontaudit_add_entry(domain source) {
        /// Do not audit denials for adding entries to this directory.
        this<dir_api>.dontaudit_add_entry(source);
        this<symlink_api>.dontaudit_read(source);
    }

    fn delete_entry(domain source) {
        /// Delete entries from this directory.
        this<dir_api>.delete_entry(source);
        this<symlink_api>.read(source);
    }

    fn dontaudit_delete_entry(domain source) {
        /// Do not audit denials for deleting entries from this directory.
        this<dir_api>.dontaudit_delete_entry(source);
        this<symlink_api>.dontaudit_read(source);
    }

    fn write(domain source) {
        /// Write this directory.
        /// This function typically is only useful if the code is checking to see if this directory
        /// is writable.  The add_entry(), delete_entry(), or rw() functions are better choices
        /// in most cases.
        this<dir_api>.write(source);
        this<symlink_api>.read(source);
    }

    fn dontaudit_write(domain source) {
        /// Do not audit denials for writing this directory.
        this<dir_api>.dontaudit_write(source);
        this<symlink_api>.dontaudit_read(source);
    }

    fn rw(domain source) {
        /// Add and delete entries from this directory.
        this<dir_api>.rw(source);
        this<symlink_api>.read(source);
    }

    fn dontaudit_rw(domain source) {
        /// Do not audit denials for adding and deleting entries from this directory.
        this<dir_api>.dontaudit_rw(source);
        this<symlink_api>.dontaudit_read(source);
    }

    fn create(domain source) {
        /// Create this directory.
        this<dir_api>.list(source);
        this<dir_api>.add_entry(source);
        this<dir_api>.create(source);
        this<symlink_api>.read(source);
        this<symlink_api>.create(source);
    }

    fn dontaudit_create(domain source) {
        /// Do not audit denials for creating this directory.
        this<dir_api>.dontaudit_list(source);
        this<dir_api>.dontaudit_add_entry(source);
        this<dir_api>.dontaudit_create(source);
        this<symlink_api>.dontaudit_read(source);
        this<symlink_api>.dontaudit_create(source);
    }

    fn rename(domain source) {
        /// Rename this directory.
        this<dir_api>.rename(source);
        this<dir_api>.rw(source);
        this<symlink_api>.read(source);
        this<symlink_api>.rename(source);
    }

    fn dontaudit_rename(domain source) {
        /// Do not audit denials for renaming this directory.
        this<dir_api>.dontaudit_rename(source);
        this<dir_api>.dontaudit_rw(source);
        this<symlink_api>.dontaudit_read(source);
        this<symlink_api>.dontaudit_rename(source);
    }

    @alias(unlink)
    fn delete(domain source) {
        /// Delete this directory.
        this<dir_api>.delete(source);
        this<dir_api>.list(source);
        this<dir_api>.delete_entry(source);
        this<symlink_api>.read(source);
        this<symlink_api>.delete(source);
    }

    @alias(dontaudit_unlink)
    fn dontaudit_delete(domain source) {
        /// Do not audit denials for deleting this directory.
        this<dir_api>.dontaudit_delete(source);
        this<dir_api>.dontaudit_list(source);
        this<dir_api>.dontaudit_delete_entry(source);
        this<symlink_api>.dontaudit_read(source);
        this<symlink_api>.dontaudit_delete(source);
    }

    fn manage(domain source) {
        /// Create, add entries, remove entries, and delete this directory.
        this<dir_api>.manage(source);
        this<symlink_api>.manage(source);
    }

    fn dontaudit_manage(domain source) {
        /// Do not audit denials for creating, adding entries, removing entries, and deleting this directory.
        this<dir_api>.dontaudit_manage(source);
        this<symlink_api>.dontaudit_manage(source);
    }

    fn relabelfrom(domain source) {
        /// Change directory labels from this type.
        this<dir_api>.relabelfrom(source);
        this<symlink_api>.read(source);
    }

    fn dontaudit_relabelfrom(domain source) {
        /// Do not audit denials for changing directory labels from this type.
        this<dir_api>.dontaudit_relabelfrom(source);
        this<symlink_api>.dontaudit_read(source);
    }

    fn relabelto(domain source) {
        /// Change directory labels to this type.
        this<dir_api>.relabelto(source);
        this<symlink_api>.read(source);
    }

    fn dontaudit_relabelto(domain source) {
        /// Do not audit denials for changing directory labels to this type.
        this<dir_api>.dontaudit_relabelto(source);
        this<symlink_api>.dontaudit_read(source);
    }

    fn relabel(domain source) {
        /// Change directory labels to this type and from this type.
        this<dir_api>.relabel(source);
        this<symlink_api>.read(source);
    }

    fn dontaudit_relabel(domain source) {
        /// Do not audit denials for changing directory labels to this type and from this type.
        this<dir_api>.dontaudit_relabel(source);
        this<symlink_api>.dontaudit_read(source);
    }

    fn add_entry_filetrans(domain source, resource default, [class]obj_classes, string name=None) {
        /// Create a file-like object in this directory with a private type.
        /// This does not allow deletions from the directory.
        allow(source, this, dir, add_entry_dir_perms);
        resource_transition(default, source, this, obj_classes, name);
    }

    fn filetrans(domain source, resource default, [class]obj_classes, string name=None) {
        /// Create a file-like object in this directory with a private type.
        allow(source, this, dir, rw_dir_perms);
        resource_transition(default, source, this, obj_classes, name);
    }

    fn unconfined(domain source) {
        /// Unconfined access (all permissions) on this directory.
        this<dir_api>.unconfined(source);
        this<symlink_api>.unconfined(source);
    }
}

@derive(strategy=common_pipe_api)
trait resource common_pipe_api inherits dir_api, pipe_api, symlink_api {
    /// Virtual for pipes (FIFOs, fifo_file object class).

    @alias(stat)
    fn getattr(domain source) {
        /// Get the attributes of this pipe.
        this<pipe_api>.getattr(source);
        this<dir_api>.list(source);
        this<symlink_api>.read(source);
    }

    @alias(dontaudit_stat)
    fn dontaudit_getattr(domain source) {
        /// Do not audit denials for getting the attributes of this pipe.
        this<pipe_api>.dontaudit_getattr(source);
        this<dir_api>.dontaudit_list(source);
        this<symlink_api>.dontaudit_read(source);
    }

    @alias(chown, chmod)
    fn setattr(domain source) {
        /// Set the attributes of this pipe.
        this<pipe_api>.setattr(source);
        this<dir_api>.list(source);
        this<symlink_api>.read(source);
    }

    @alias(dontaudit_chown, dontaudit_chmod)
    fn dontaudit_setattr(domain source) {
        /// Do not audit denials for setting the attributes of this pipe.
        this<pipe_api>.dontaudit_setattr(source);
        this<dir_api>.dontaudit_list(source);
        this<symlink_api>.dontaudit_read(source);
    }

    fn list(domain source) {
        /// List (read) the contents of this directory.
        this<dir_api>.list(source);
        this<symlink_api>.read(source);
    }

    fn dontaudit_list(domain source) {
        /// Do not audit denials for listing (reading) the contents of this directory.
        this<dir_api>.dontaudit_read(source);
        this<symlink_api>.dontaudit_read(source);
    }

    fn read(domain source) {
        /// Read this pipe.
        this<pipe_api>.read(source);
        this<dir_api>.list(source);
        this<symlink_api>.read(source);
    }

    fn dontaudit_read(domain source) {
        /// Do not audit denials for reading this pipe.
        this<pipe_api>.dontaudit_read(source);
        this<dir_api>.dontaudit_list(source);
        this<symlink_api>.dontaudit_read(source);
    }

    @alias(append)
    fn write(domain source) {
        /// Write this pipe.
        this<pipe_api>.write(source);
        this<dir_api>.list(source);
        this<symlink_api>.read(source);
    }

    @alias(dontaudit_append)
    fn dontaudit_write(domain source) {
        /// Do not audit denials for writing this pipe.
        this<pipe_api>.dontaudit_write(source);
        this<dir_api>.dontaudit_list(source);
        this<symlink_api>.dontaudit_read(source);
    }

    fn rw(domain source) {
        /// Read and write this pipe.
        this<pipe_api>.rw(source);
        this<dir_api>.list(source);
        this<symlink_api>.read(source);
    }

    fn dontaudit_rw(domain source) {
        /// Do not audit denials for reading and writing this pipe.
        this<pipe_api>.dontaudit_rw(source);
        this<dir_api>.dontaudit_list(source);
        this<symlink_api>.dontaudit_read(source);
    }

    fn create(domain source) {
        /// Create this pipe.
        this<pipe_api>.create(source);
        this<dir_api>.list(source);
        this<dir_api>.create(source);
        this<dir_api>.add_entry(source);
        this<symlink_api>.read(source);
        this<symlink_api>.create(source);
    }

    fn dontaudit_create(domain source) {
        /// Do not audit denials for creating this pipe.
        this<pipe_api>.dontaudit_create(source);
        this<dir_api>.dontaudit_list(source);
        this<dir_api>.dontaudit_create(source);
        this<dir_api>.dontaudit_add_entry(source);
        this<symlink_api>.dontaudit_read(source);
        this<symlink_api>.dontaudit_create(source);
    }

    fn rename(domain source) {
        /// Rename this pipe.
        this<pipe_api>.rename(source);
        this<dir_api>.rename(source);
        this<dir_api>.rw(source);
        this<symlink_api>.read(source);
        this<symlink_api>.rename(source);
    }

    fn dontaudit_rename(domain source) {
        /// Do not audit denials for renaming this pipe.
        this<pipe_api>.dontaudit_rename(source);
        this<dir_api>.dontaudit_rename(source);
        this<dir_api>.dontaudit_rw(source);
        this<symlink_api>.dontaudit_read(source);
        this<symlink_api>.dontaudit_rename(source);
    }

    @alias(unlink)
    fn delete(domain source) {
        /// Delete this pipe.
        this<pipe_api>.delete(source);
        this<dir_api>.list(source);
        this<dir_api>.delete(source);
        this<dir_api>.delete_entry(source);
        this<symlink_api>.read(source);
        this<symlink_api>.delete(source);
    }

    @alias(dontaudit_unlink)
    fn dontaudit_delete(domain source) {
        /// Do not audit denials for deleting this pipe.
        this<pipe_api>.dontaudit_delete(source);
        this<dir_api>.dontaudit_list(source);
        this<dir_api>.dontaudit_delete(source);
        this<dir_api>.dontaudit_delete_entry(source);
        this<symlink_api>.dontaudit_read(source);
        this<symlink_api>.dontaudit_delete(source);
    }

    fn manage(domain source) {
        /// Create, read, write, and delete this pipe.
        this<pipe_api>.manage(source);
        this<dir_api>.manage(source);
        this<symlink_api>.manage(source);
    }

    fn dontaudit_manage(domain source) {
        /// Do not audit denials for creating, reading, writing, and deleting this pipe.
        this<pipe_api>.dontaudit_manage(source);
        this<dir_api>.dontaudit_manage(source);
        this<symlink_api>.dontaudit_manage(source);
    }

    fn relabelfrom(domain source) {
        /// Change pipe labels from this type.
        this<pipe_api>.relabelfrom(source);
        this<dir_api>.list(source);
        this<symlink_api>.read(source);
    }

    fn dontaudit_relabelfrom(domain source) {
        /// Do not audit denials for changing pipe labels from this type.
        this<pipe_api>.dontaudit_relabelfrom(source);
        this<dir_api>.dontaudit_list(source);
        this<symlink_api>.dontaudit_read(source);
    }

    fn relabelto(domain source) {
        /// Change pipe labels to this type.
        this<pipe_api>.relabelto(source);
        this<dir_api>.list(source);
        this<symlink_api>.read(source);
    }

    fn dontaudit_relabelto(domain source) {
        /// Do not audit denials for changing pipe labels to this type.
        this<pipe_api>.dontaudit_relabelto(source);
        this<dir_api>.dontaudit_list(source);
        this<symlink_api>.dontaudit_read(source);
    }

    fn relabel(domain source) {
        /// Change pipe labels to this type and from this type.
        this<pipe_api>.relabel(source);
        this<dir_api>.list(source);
        this<symlink_api>.read(source);
    }

    fn dontaudit_relabel(domain source) {
        /// Do not audit denials for changing pipe labels to this type and from this type.
        this<pipe_api>.dontaudit_relabel(source);
        this<dir_api>.dontaudit_list(source);
        this<symlink_api>.dontaudit_read(source);
    }

    fn add_entry_filetrans(domain source, resource default, [class]obj_classes, string name=None) {
        /// Create a file-like object in this directory with a private type.
        /// This does not allow deletions from the directory.
        allow(source, this, dir, add_entry_dir_perms);
        resource_transition(default, source, this, obj_classes, name);
    }

    fn filetrans(domain source, resource default, [class]obj_classes, string name=None) {
        /// Create a file-like object in this directory with a private type.
        allow(source, this, dir, rw_dir_perms);
        resource_transition(default, source, this, obj_classes, name);
    }

    fn unconfined(domain source) {
        /// Unconfined access (all permissions) on this pipe.
        this<pipe_api>.unconfined(source);
        this<dir_api>.unconfined(source);
        this<symlink_api>.unconfined(source);
    }
}

@derive(strategy=named_socket_api)
trait resource common_named_socket_api inherits dir_api, symlink_api, named_socket_api {
    /// API for common named UNIX sockets (sock_file object class).

    @alias(stat)
    fn getattr(domain source) {
        /// Get the attributes of this named UNIX socket.
        this<named_socket_api>.getattr(source);
        this<dir_api>.list(source);
        this<symlink_api>.read(source);
    }

    @alias(dontaudit_stat)
    fn dontaudit_getattr(domain source) {
        /// Do not audit denials for getting the attributes of this named UNIX socket.
        this<named_socket_api>.dontaudit_getattr(source);
        this<dir_api>.dontaudit_list(source);
        this<symlink_api>.dontaudit_read(source);
    }

    @alias(chown, chmod)
    fn setattr(domain source) {
        /// Set the attributes of this named UNIX socket.
        this<named_socket_api>.setattr(source);
        this<dir_api>.list(source);
        this<symlink_api>.read(source);
    }

    @alias(dontaudit_chown, dontaudit_chmod)
    fn dontaudit_setattr(domain source) {
        /// Do not audit denials for setting the attributes of this named UNIX socket.
        this<named_socket_api>.dontaudit_setattr(source);
        this<dir_api>.dontaudit_list(source);
        this<symlink_api>.dontaudit_read(source);
    }

    fn list(domain source) {
        /// List (read) the contents of this directory.
        this<dir_api>.list(source);
        this<symlink_api>.read(source);
    }

    fn dontaudit_list(domain source) {
        /// Do not audit denials for listing (reading) the contents of this directory.
        this<dir_api>.dontaudit_read(source);
        this<symlink_api>.dontaudit_read(source);
    }

    fn read(domain source) {
        /// Read this named UNIX socket.
        this<named_socket_api>.read(source);
        this<dir_api>.list(source);
        this<symlink_api>.read(source);
    }

    fn dontaudit_read(domain source) {
        /// Do not audit denials for reading this named UNIX socket.
        this<named_socket_api>.dontaudit_read(source);
        this<dir_api>.dontaudit_list(source);
        this<symlink_api>.dontaudit_read(source);
    }

    @alias(append)
    fn write(domain source) {
        /// Write this named UNIX socket.
        this<named_socket_api>.write(source);
        this<dir_api>.list(source);
        this<symlink_api>.read(source);
    }

    @alias(dontaudit_append)
    fn dontaudit_write(domain source) {
        /// Do not audit denials for writing this named UNIX socket.
        this<named_socket_api>.dontaudit_write(source);
        this<dir_api>.dontaudit_list(source);
        this<symlink_api>.dontaudit_read(source);
    }

    fn rw(domain source) {
        /// Read and write this named UNIX socket.
        this<named_socket_api>.rw(source);
        this<dir_api>.list(source);
        this<symlink_api>.read(source);
    }

    fn dontaudit_rw(domain source) {
        /// Do not audit denials for reading and writing this named UNIX socket.
        this<named_socket_api>.dontaudit_rw(source);
        this<dir_api>.dontaudit_list(source);
        this<symlink_api>.dontaudit_read(source);
    }

    fn create(domain source) {
        /// Create this named UNIX socket.
        this<named_socket_api>.create(source);
        this<dir_api>.list(source);
        this<dir_api>.create(source);
        this<dir_api>.add_entry(source);
        this<symlink_api>.read(source);
        this<symlink_api>.create(source);
    }

    fn dontaudit_create(domain source) {
        /// Do not audit denials for creating this named UNIX socket.
        this<named_socket_api>.dontaudit_create(source);
        this<dir_api>.dontaudit_list(source);
        this<dir_api>.dontaudit_create(source);
        this<dir_api>.dontaudit_add_entry(source);
        this<symlink_api>.dontaudit_read(source);
        this<symlink_api>.dontaudit_create(source);
    }

    fn rename(domain source) {
        /// Rename this named UNIX socket.
        this<named_socket_api>.rename(source);
        this<dir_api>.rename(source);
        this<dir_api>.rw(source);
        this<symlink_api>.read(source);
        this<symlink_api>.rename(source);
    }

    fn dontaudit_rename(domain source) {
        /// Do not audit denials for renaming this named UNIX socket.
        this<named_socket_api>.dontaudit_rename(source);
        this<dir_api>.dontaudit_rename(source);
        this<dir_api>.dontaudit_rw(source);
        this<symlink_api>.dontaudit_read(source);
        this<symlink_api>.dontaudit_rename(source);
    }

    @alias(unlink)
    fn delete(domain source) {
        /// Delete this named UNIX socket.
        this<named_socket_api>.delete(source);
        this<dir_api>.list(source);
        this<dir_api>.delete(source);
        this<dir_api>.delete_entry(source);
        this<symlink_api>.read(source);
        this<symlink_api>.delete(source);
    }

    @alias(dontaudit_unlink)
    fn dontaudit_delete(domain source) {
        /// Do not audit denials for deleting this named UNIX socket.
        this<named_socket_api>.dontaudit_delete(source);
        this<dir_api>.dontaudit_list(source);
        this<dir_api>.dontaudit_delete(source);
        this<dir_api>.dontaudit_delete_entry(source);
        this<symlink_api>.dontaudit_read(source);
        this<symlink_api>.dontaudit_delete(source);
    }

    fn manage(domain source) {
        /// Create, read, write, and delete this named UNIX socket.
        this<named_socket_api>.manage(source);
        this<dir_api>.manage(source);
        this<symlink_api>.manage(source);
    }

    fn dontaudit_manage(domain source) {
        /// Do not audit denials for creating, reading, writing, and deleting this named UNIX socket.
        this<named_socket_api>.dontaudit_manage(source);
        this<dir_api>.dontaudit_manage(source);
        this<symlink_api>.dontaudit_manage(source);
    }

    fn relabelfrom(domain source) {
        /// Change named UNIX socket labels from this type.
        this<named_socket_api>.relabelfrom(source);
        this<dir_api>.list(source);
        this<symlink_api>.read(source);
    }

    fn dontaudit_relabelfrom(domain source) {
        /// Do not audit denials for changing named UNIX socket labels from this type.
        this<named_socket_api>.dontaudit_relabelfrom(source);
        this<dir_api>.dontaudit_list(source);
        this<symlink_api>.dontaudit_read(source);
    }

    fn relabelto(domain source) {
        /// Change named UNIX socket labels to this type.
        this<named_socket_api>.relabelto(source);
        this<dir_api>.list(source);
        this<symlink_api>.read(source);
    }

    fn dontaudit_relabelto(domain source) {
        /// Do not audit denials for changing named UNIX socket labels to this type.
        this<named_socket_api>.dontaudit_relabelto(source);
        this<dir_api>.dontaudit_list(source);
        this<symlink_api>.dontaudit_read(source);
    }

    fn relabel(domain source) {
        /// Change named UNIX socket labels to this type and from this type.
        this<named_socket_api>.relabel(source);
        this<dir_api>.list(source);
        this<symlink_api>.read(source);
    }

    fn dontaudit_relabel(domain source) {
        /// Do not audit denials for changing named UNIX socket labels to this type and from this type.
        this<named_socket_api>.dontaudit_relabel(source);
        this<dir_api>.dontaudit_list(source);
        this<symlink_api>.dontaudit_read(source);
    }

    fn add_entry_filetrans(domain source, resource default, [class]obj_classes, string name=None) {
        /// Create a file-like object in this directory with a private type.
        /// This does not allow deletions from the directory.
        allow(source, this, dir, add_entry_dir_perms);
        resource_transition(default, source, this, obj_classes, name);
    }

    fn filetrans(domain source, resource default, [class]obj_classes, string name=None) {
        /// Create a file-like object in this directory with a private type.
        allow(source, this, dir, rw_dir_perms);
        resource_transition(default, source, this, obj_classes, name);
    }

    fn unconfined(domain source) {
        this<named_socket_api>.unconfined(source);
        this<dir_api>.unconfined(source);
        this<symlink_api>.unconfined(source);
    }
}

//
// Higher-level file virtuals
//

@derive(strategy=common_file_api)
virtual resource common_file inherits dir, file, symlink, common_file_api {
    /// Virtual for regular files (file object class).
    /// This provides common access patterns for accessing files,
    /// including directory and symlink access.
}

let notcommondir_class_set = [ fifo_file file sock_file blk_file chr_file ];

@derive(strategy=common_dir_api)
virtual resource common_dir inherits dir, symlink, common_dir_api {
    /// Virtual for directories (dir object class).
    /// This provides common access patterns for accessing files,
    /// including symlink access.
}

@derive(strategy=common_pipe_api)
virtual resource common_pipe inherits dir, pipe, symlink, common_pipe_api {
    /// Virtual for pipes (FIFOs, fifo_file object class).
    /// This provides common access patterns for accessing pipes,
    /// including directory and symlink access.
}

@derive(strategy=common_named_socket_api)
virtual resource common_named_socket inherits dir, named_socket, symlink, common_named_socket_api {
    /// Low-level virtual for named UNIX sockets (sock_file object class).
    /// This provides common access patterns for accessing named sockets,
    /// including directory and symlink access.
}
